#!/usr/bin/env python

import argparse
import datetime
import json
import os
import time
import logging
import requests
import subprocess
import threading
import time

from dateutil import parser
from dotenv import load_dotenv
from enum import Enum
from flask import Flask, request
from twilio.rest import Client
from twilio.twiml.messaging_response import MessagingResponse, Message


log = logging.getLogger('dadbot')

load_dotenv()

TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_NUMBER = os.getenv("TWILIO_NUMBER")
URL = os.getenv("DADBOT_URL", "")
SLEEP = int(os.getenv("DADBOT_SLEEP", "60"))


class BotState(Enum):
    OK = 1
    IDLE = 2
    STALE =3


def from_pretty(s: str) -> int:
    s = s.strip()
    if not s[-1].isdigit():
        unit = s[-1]
        v = int(s[0:-1])
        if unit == 's':
            pass
        elif unit == 'm':
            v *= 60
        elif unit == 'h':
            v *= 60*60
        elif unit == 'd':
            v *= 24*60*60
        else:
            raise ValueError(f'unrecognized unit "{unit}" from "{s}"')
        return v
    else:
        return int(s)

def to_pretty_timedelta(s: int) -> str:
    n = datetime.timedelta(seconds=s)
    if n < datetime.timedelta(seconds=120):
        return str(int(n.total_seconds())) + 's'
    if n < datetime.timedelta(minutes=120):
        return str(int(n.total_seconds()) // 60) + 'm'
    if n < datetime.timedelta(hours=48):
        return str(int(n.total_seconds()) // 3600) + 'h'
    if n < datetime.timedelta(days=14):
        return str(int(n.total_seconds()) // (3600*24)) + 'd'
    if n < datetime.timedelta(days=7*12):
        return str(int(n.total_seconds()) // (3600*24*7)) + 'w'
    if n < datetime.timedelta(days=365*2):
        return str(int(n.total_seconds()) // (3600*24*30)) + 'M'
    return str(int(n.total_seconds()) // (3600*24*365)) + 'y'


class Dadbot:
    def __init__(self):
        self.client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)

        self.load()
        self.state = BotState.OK

        self.agent = (URL != "")

        self.bg = None
        self._stop = True

    def load(self):
        with open('state.json', 'r') as f:
            try:
                s = json.loads(f.read())
            except json.decoder.JSONDecodeError:
                s = {}
            log.info("Load: {s}")
            self.subs = s.get('subs', [])
            self.max_idle = s.get('max_idle', 24*60*60)
            try:
                self.idle_since = parser.isoparse(s.get('idle_since', ''))
            except ValueError:
                self.idle_since = datetime.datetime.utcnow()
            try:
                self.last_update = parser.isoparse(s.get('last_update', ''))
            except ValueError:
                self.last_update = datetime.datetime.utcnow()

    def save(self):
        with open('state.json.new', 'w') as f:
            f.write(json.dumps({
                'subs': self.subs,
                'max_idle': self.max_idle,
                'idle_since': self.idle_since.isoformat(),
                'last_update': self.last_update.isoformat(),
            }))
            os.fsync(f.fileno())
        os.rename('state.json.new', 'state.json')

    def send_subs(self, who):
        what = []
        if who in self.subs:
            what.append('idle notifications')
        self.send_message(
            who,
            f'You are subscribed to {" and ".join(what)}'
        )

    def get_idle_time(self):
        out = subprocess.check_output('DISPLAY=:0 xprintidle', shell=True)
        idle = int(out) / 1000.0
        log.debug(f'....Idle is {idle}')
        return idle

    def send_to_subs(self, message):
        log.info(f'send_note {message}')
        for s in self.subs:
            self.send_message(s, message)
    
    def send_message(self, who, message):
        log.info(f"send_message {who} '{message}'")
        self.client.messages.create(body=message, from_=TWILIO_NUMBER, to=who)

    def receive_message(self, who, message):
        cmd = message.lower()
        log.info(f'{who}: {cmd}')

        if cmd == 'status' or cmd == 's':
            idle = (datetime.datetime.utcnow() - self.idle_since).total_seconds()
            up = (datetime.datetime.utcnow() - self.last_update).total_seconds()
            self.send_message(who, f'Idle for {to_pretty_timedelta(idle)} ({self.idle_since.isoformat()})\nLast update was {to_pretty_timedelta(up)} ago ({self.last_update.isoformat()})\nNotify at {to_pretty_timedelta(self.max_idle)}\n')

        elif cmd == 'sub':
            self.subs.add(who)
            self.save()
            self.send_subs(who)

        elif cmd == 'unsub':
            if who in self.subs:
                self.subs.remove(who)
            self.save()
            self.send_subs(who)

        elif cmd and cmd.split()[0] == 'max':
            try:
                self.max_idle = from_pretty(cmd.split()[1])
                self.save()
                self.send_to_subs(
                    f'New max idle is {to_pretty_timedelta(self.max_idle)}, set by {who}'
                )
            except ValueError:
                self.send_message(
                    who,
                    'Must send "max <idle_time>", e.g., "max 24h"'
                )

        elif cmd == 'who':
            self.send_message(
                who,
                f"Subscribers: {' '.join(self.subs)}\n"
            )
        elif cmd == 'whoami':
            self.send_message(
                who,
                'You are %s' % who
            )

        elif who is self.subs and cmd == 'help':
            self.send_message(
                who,
                's or status -- current status\n'
                'sub -- subscribe\n'
                'unsub -- unsubscribe\n'
                'max <duration> -- adjust idle time to warn at (e.g., "max 24h")]\n'
                'who -- see who (else) is subscribed\n'
                'help -- this message\n'
            )

    def got_update(self, idle_since):
        log.info(f'got_update since {idle_since.isoformat()}')
        self.idle_since = idle_since
        self.last_update = datetime.datetime.utcnow()
        self.save()

    def get_state(self):
        now = datetime.datetime.utcnow()
        last_up = (now - self.last_update).total_seconds()
        idle = (now - self.idle_since).total_seconds()
        if last_up > self.max_idle:
            return BotState.STALE, f'No update for {to_pretty_timedelta(last_up)} (since {self.last_update.isoformat()})'
        elif idle > self.max_idle:
            return BotState.IDLE, f'Idle for {to_pretty_timedelta(idle)} (since {self.idle_since.isoformat()})'
        else:
            return BotState.OK, f'Recently active, idle for {to_pretty_timedelta(idle)}'

    def do_main(self):
        log.info('main start')

        while not self._stop:
            if self.agent:
                idle = self.get_idle_time()
                try:
                    response = requests.get(
                        URL,
                        params={
                            'idle_seconds': int(idle),
                        },
                        timeout=5,
                    )
                except Exception as e:
                    log.exception(e)
            else:
                new_state, msg = self.get_state()
                if self.state != new_state:
                    self.send_to_subs(msg)
                    self.state = new_state

            time.sleep(SLEEP)
        log.info('main exit')

    def start(self):
        log.info('start')
        assert not self.bg
        assert self._stop
        self.bg = threading.Thread(target=dadbot.do_main, args=())
        self._stop = False
        self.bg.start()

    def stop(self):
        log.info('stop')
        assert not self._stop
        assert self.bg
        self._stop = True
        self.bg.join()
        self.bg = None


###########

dadbot = Dadbot()
app = Flask(__name__)

@app.route('/sms', methods=['POST'])
def inbound_sms():
    who = request.form['From']
    body = request.form['Body']
    dadbot.receive_message(who, body)
    response = MessagingResponse()
    return str(response)

@app.route('/update', methods=['GET'])
def inbound_idle():
    try:
        idle_seconds = int(request.args.get('idle_seconds'))
        idle_since = datetime.datetime.utcnow() - datetime.timedelta(
            seconds=idle_seconds
        )
        dadbot.got_update(idle_since)
    except ValueError:
        log.warning("/update didn't get valid idle_seconds")
    return ""

def _get_parser():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        '-d', '--debug', action='store_true',
        help='log detailed debugging messages'
    )
    return parser

if __name__ == '__main__':
    log.info('main start')
    args = _get_parser().parse_args()
    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO)

    dadbot.start()
    app.run(host='0.0.0.0', debug=True, use_reloader=False)
    dadbot.stop()

    log.info('main end')
